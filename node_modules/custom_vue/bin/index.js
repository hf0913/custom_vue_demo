#!/usr/bin/env node
// eslint-disable-next-line strict
'use strict';
const fs = require('fs');
const path = require('path');
const CWD = process.cwd();
const COMMAND_LINT = `--ignore-path ${path.join(__dirname, '../.eslintignore')} -c ${path.join(__dirname, '../.eslintrc.js')} --ext .js,.vue ${CWD}/src`;
const COMMAND_FIX_LINT = `--ignore-path ${path.join(__dirname, '../.eslintignore')} -c ${path.join(__dirname, '../.eslintrc.js')} --fix --ext .js,.vue ${CWD}/src`;
const COMMAND_DEV = '--config';
const {
    env: {
        NODE_ENV
    }
} = process;

if (!NODE_ENV) {
    throw new Error('Missing NODE_ENV，Command example：cross-env NODE_ENV=dev Maple');
}
writeFile(path.resolve(CWD, './package.json'));
copyFile(path.resolve(__dirname, '../.eslintrc.js'), path.resolve(CWD, './.eslintrc.js'));
copyFile(path.resolve(__dirname, '../.eslintignore'), path.resolve(CWD, './.eslintignore'));

function copyFile(from, to) {
    fs.copyFileSync(from, to, 'r+', (err) => {
        if (err) throw err;
    });
}

function writeFile(file) {
    fs.readFile(file, 'utf8', (err, data) => {
        if (err) throw err;
        let content = JSON.parse(data);
        content = Object.assign(content, {
            // eslint-disable-next-line quotes
            "husky": {
                // eslint-disable-next-line quotes
                "hooks": {
                    // eslint-disable-next-line quotes
                    "pre-commit": "cross-env NODE_ENV=lint Maple"
                }
            }
        });
        fs.writeFile(file, JSON.stringify(content, null, 4), 'utf8', (err) => {
            if (err) throw err;
        });
    });
}
// process.argv = [process.argv[0], process.argv[1]]; // 初始化node指令

switch (NODE_ENV) {
    case 'dev':
        process.argv.push(...COMMAND_DEV.split(' '), path.join(__dirname, '../index.js'));
        require('webpack-dev-server/bin/webpack-dev-server.js');
        break;
    case 'fixLint':
        process.argv.push(...COMMAND_FIX_LINT.split(' '));
        require('eslint/bin/eslint.js');
        break;
    case 'lint':
        process.argv.push(...COMMAND_LINT.split(' '));
        require('eslint/bin/eslint.js');
        break;
    case 'production':
        require('../build.js');
        break;
}