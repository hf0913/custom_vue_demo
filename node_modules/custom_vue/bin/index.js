#!/usr/bin/env node
'use strict';
const fs = require('fs');
const path = require('path');
const CWD = process.cwd();
const CONFIG = '--config'
const COMMAND_FIX_ESLINT = `--ignore-path ${path.resolve(__dirname, '../.eslintignore')} ${CONFIG} ${path.resolve(__dirname, '../.eslintrc.js')} --fix --ext .js,.vue ${path.resolve(CWD, './src')}`;
const COMMAND_FIX_STYLELINT = `${CONFIG} ${path.resolve(__dirname, '../.stylelintrc.js')} ${path.resolve(CWD, './src/**/*.html')} ${path.resolve(CWD, './src/**/*.vue')} ${path.resolve(CWD, './src/**/*.css')} ${path.resolve(CWD, './src/**/*.scss')} ${path.resolve(CWD, './src/**/*.less')} --fix`;
const {
    argv
} = process;
const SCRIPT = ['fixEslint', 'fixStyleLint', 'serve', 'build', 'lint']
let index = -1208
for (let [i, j] of argv.entries()) {
    if (SCRIPT.includes(j)) {
        index = i
        break
    }
}
const type = argv[index]
switch (true) {
    case index === -1208:
        throw new Error('Syntax error：Script must contain Maple')
    case type && !SCRIPT.includes(type):
        throw new Error(`Syntax error：Maple accepts parameters【${JSON.stringify(SCRIPT)}】 immediately after`)
}

process.argv.pop();

function copyFile(from, to) {
    fs.copyFileSync(from, to, 'r+', (err) => {
        if (err) throw err;
    });
}

function writeFile(file) {
    fs.readFile(file, 'utf8', (err, data) => {
        if (err) throw err;
        let content = JSON.parse(data);
        content = Object.assign(content, {
            "husky": {
                "hooks": {
                    "pre-commit": "Maple lint"
                }
            }
        });
        fs.writeFile(file, JSON.stringify(content, null, 4), 'utf8', (err) => {
            if (err) throw err;
        });
    });
}

writeFile(path.resolve(CWD, './package.json'));
copyFile(path.resolve(__dirname, '../.eslintrc.js'), path.resolve(CWD, './.eslintrc.js'));
copyFile(path.resolve(__dirname, '../.eslintignore'), path.resolve(CWD, './.eslintignore'));
copyFile(path.resolve(__dirname, '../.stylelintrc.js'), path.resolve(CWD, './.stylelintrc.js'));

switch (type) {
    case 'serve':
        process.argv.push('--progress', ...CONFIG.split(' '), path.resolve(__dirname, '../Maple/dev.js'));
        require('webpack-dev-server/bin/webpack-dev-server.js');
        break;
    case 'fixEslint':
        process.argv.push(...COMMAND_FIX_ESLINT.split(' '));
        require('eslint/bin/eslint.js');
        break;
    case 'fixStyleLint':
        process.argv.push(...COMMAND_FIX_STYLELINT.split(' '));
        require('stylelint/bin/stylelint');
        break;
    case 'build':
        process.argv.push('--progress', ...CONFIG.split(' '), path.resolve(__dirname, '../Maple/base.js'));
        require('webpack/bin/webpack.js');
        break;
    case 'lint':
        process.argv.push(...(COMMAND_FIX_ESLINT.replace(/--fix/g, '').split(' ')));
        require('eslint/bin/eslint.js');
        process.argv = [process.argv[0], process.argv[1]]
        process.argv.push(...(COMMAND_FIX_STYLELINT.replace(/--fix/g, '').split(' ')));
        require('stylelint/bin/stylelint');
        break;
}